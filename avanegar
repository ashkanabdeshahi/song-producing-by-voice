import sounddevice as sd
from scipy.io.wavfile import write

fs = 44100  # Sample rate?import sounddevice as sd
seconds = 3
# Duration of recording
myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
sd.wait()  # Wait until recording is finished
write('ashkan.wav', fs, myrecording)  # Save as WAV file 
#input(inter a wma file):

import numpy as np

from scipy.fftpack import fft
from scipy.io import wavfile # get the api
fs, data = wavfile.read('ashkan.wav') # load the data
a = data.T[0] # this is a two channel soundtrack, I get the first track
b=[(ele/2**8.)*2-1 for ele in a] # this is 8-bit track, b is now normalized on [-1,1)
c = fft(b) # calculate fourier transform (complex numbers list)
d = len(c)#/2  # you only need half of the fft list (real signal symmetry)
#e=np.array(c)
e=(seconds*4)
print (c) 
    
from math import log2, pow
A4 = 440
C0 = ((A4*pow(2, -4.75)))
name = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B",""]
freq = [261.6,277.2,293.7,311.1,329.6,349.2,370.0,392.0,415.3,440.0,466.2,493.9,0]
frequency=[]
note=[]
octave_n=[]
nn=[]
oo=[]
for i in range (d):
        h = round(12*log2(abs(c[i]/C0)))
        if h==0:
               n = 12
        else:
               octave = h // 12
               n = (h % 12)
        oo.append(octave)
        nn.append(n)
#note.append(name[n]+str(int((octave+23)/2)))        

print(e)
for j in range (e):
        m=int((sum(nn[((j-1)*11025):((j)*11025)]))/11025)
        p=int((sum(oo[((j-1)*11025):((j)*11025)]))/11025)
        note.append(name[m]+str(int((p+23)/2)%8)+'-')
        frequency.append(freq[m])
        #e=np.array(frequency)
        #octave_n.append(str(int((octave+23)/2)))
        
#notecomplex=music21.note.Note(note)
#print chord
import music21
#from music21 import note
#note21=[]
#for k in range (d):
    #note1 = note.Note(note[k])
 #   #note21.append(note1)
print (note)
print (frequency)
#print (note21)
s_note= ''.join(note)
print (s_note)

import numpy as np

samplerate = 44100 #Frequecy in Hz

def get_wave(freq, duration=0.5):
    '''
    Function takes the "frequecy" and "time_duration" for a wave 
    as the input and returns a "numpy array" of values at all points 
    in time
    '''
    
    amplitude = 4096
    t = np.linspace(0, duration, int(samplerate * duration))
    wave = amplitude * np.sin(2 * np.pi * freq * t)
    
    return wave

# To get a 1 second long wave of frequency 440Hz
a_wave = get_wave(440, 1)

#wave features
print(len(a_wave)) # 44100
print(np.max(a_wave)) # 4096
print(np.min(a_wave)) # -4096

import arvo as arvo
from arvo import minimalism
from arvo import tools
from arvo import isorhythm
ahang = tools.notes_to_stream(note)
ahang = minimalism.additive_process(ahang)
duration = tools.durations_to_stream([1,1])
ahang = isorhythm.create_isorhythm(ahang,duration)
print (ahang)
from music21 import midi
#note.midi()
#ahang.midi()
#import IPython.display as ipd
#ipd.Audio("note")

from pprint import pprint

def get_piano_notes():
    '''
    Returns a dict object for all the piano 
    note's frequencies
    '''
    # White keys are in Uppercase and black keys (sharps) are in lowercase
    octave1 = ['C', 'c', 'D', 'd', 'E', 'F', 'f', 'G', 'g', 'A', 'a', 'B'] 
    base_freq = 261.63 #Frequency of Note C4
    
    note_freqs = {octave1[i]: base_freq * pow(2,(i/12)) for i in range(len(octave1))}        
    note_freqs[''] = 0.0 # silent note
    
    return note_freqs
  
  # To get the piano note's frequencies
     note_freqs = get_piano_notes()
    pprint(note_freqs)
  
           {'': 0.0,
           'A': 440.00745824565865,
           'B': 493.8916728538229,
           'C': 261.63,
           'D': 293.66974569918125,
           'E': 329.63314428399565,
           'F': 349.2341510465061,
           'G': 392.0020805232462,
           'a': 466.1716632541139,
           'c': 277.18732937722245,
           'd': 311.1322574981619,
           'f': 370.00069432367286,
           'g': 415.31173722644}

import matplotlib.pyplot as plt
plt.plot(a_wave[0:int(44100/440)])
plt.xlabel('time')
plt.ylabel('Amplitude')
plt.show()

import numpy as np

def get_song_data(music_notes):
    '''
    Function to concatenate all the waves (notes)
    '''
    note_freqs = get_piano_notes() # Function that we made earlier
    song = [get_wave(note_freqs[note]) for note in music_notes.split('-')]
    song = np.concatenate(song)
    return song

#music_notes = 'C-C-G-G-A-A-G--F-F-E-E-D-D-C--G-G-F-F-E-E-D--G-G-F-F-E-E-D--C-C-G-G-A-A-G--F-F-E-E-D-D-C'
#data = get_song_data(music_notes)
data = get_song_data(s_note)
data = data * (16300/np.max(data)) # Adjusting the Amplitude (Optional)

from scipy.io.wavfile import write
write('twinkle-twinkle.wav', samplerate, data.astype(np.int16))

#summer 2019